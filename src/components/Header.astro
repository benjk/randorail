---
import content from "../data/content.json";

import type { MenuItem, PagesMap } from "../admin/components/nav/menu.types";

const pages: PagesMap = content.pages;
const rawMenu = content.menu as MenuItem[];

const menuItems = rawMenu.filter(item => {
  if (item.type === "page") {
    return pages[item.slug]?.accessible !== false;
  }
  return true;
});
---


<header class="header">
  <nav class="navbar">
    <div class="logo-container">
      <a class="logo-link logo-dark" href="/about">
        <h5>Nicolas D</h5>
      </a>
      <a class="logo-link" href="/">
        <img id="logo-home" src="/img/static/header_logo.webp" alt="Logo" />
      </a>
    </div>

    <div class="menu-desktop">
      {menuItems.map(item => (
        item.type === "action" ? (
          <a href="" data-action={item.slug}>{item.title}</a>
        ) : item.type === "external" ? (
          <a href={item.slug} target="_blank" rel="noopener">{item.title}</a>
        ) : (
          <a href={item.slug.startsWith("#") ? item.slug : `/${item.slug}`}>{item.title}</a>
        )
      ))}
    </div>
    
    <button class="burger" id="burger-btn" aria-label="Toggle menu">
      <span class="burger-line"></span>
      <span class="burger-line"></span>
      <span class="burger-line"></span>
    </button>
    </nav>
    
    <div id="mobile-menu" class="mobile-menu-container animated">
      <ul>
        {menuItems.map(item => (
          <li>
            {item.type === "action" ? (
              <a href="#" data-action={item.slug}>{item.title}</a>
            ) : item.type === "external" ? (
              <a href={item.slug} target="_blank" rel="noopener">{item.title}</a>
            ) : (
              <a href={item.slug.startsWith("#") ? item.slug : `/${item.slug}`}>{item.title}</a>
            )}
          </li>
        ))}
      </ul>
    </div>    

    <script type="module">
      const burger = document.getElementById("burger-btn");
      const menuDesktop = document.querySelector(".menu-desktop");
      const mobileMenu = document.getElementById("mobile-menu");
      const header = document.querySelector('header');

      if (burger && mobileMenu) {
        // État du menu
        let isMenuOpen = false;
        
        // Fonction pour ouvrir le menu
        const openMenu = () => {
          burger.classList.add("is-active");
          mobileMenu.classList.add("is-active");
          isMenuOpen = true;
        };
        
        // Fonction pour fermer le menu
        const closeMenu = () => {
          burger.classList.remove("is-active");
          
          if (mobileMenu.classList.contains("is-active")) {
            mobileMenu.classList.add("closing");
            
            setTimeout(() => {
              mobileMenu.classList.remove("closing");
              mobileMenu.classList.remove("is-active");
            }, 300);
          }
          
          isMenuOpen = false;
        };
        
        // Toggle menu au clic sur le burger
        const toggleMenu = () => {
          if (isMenuOpen) {
            closeMenu();
          } else {
            openMenu();
          }
        };

        burger.addEventListener("click", toggleMenu);

        // Gestion du scroll
        if (header) {
          let lastScrollY = window.scrollY;
          let isScrolling = false;
          const scrollThreshold = 150;
          
          const handleScroll = () => {
            if (isScrolling) return;
            
            isScrolling = true;
            requestAnimationFrame(() => {
              const currentScrollY = window.scrollY;
              const isScrollingDown = currentScrollY > lastScrollY;
              
              // Fermer le menu si ouvert et qu'on scroll vers le bas
              if (isMenuOpen && isScrollingDown && Math.abs(currentScrollY - lastScrollY) > 5) {
                console.log("Fermeture menu par scroll");
                closeMenu();
              }
              
              // Gestion de la visibilité du header
              if (currentScrollY > scrollThreshold) {
                if (isScrollingDown) {
                  header.classList.add('header-hidden');
                } else {
                  header.classList.remove('header-hidden');
                }
              } else {
                header.classList.remove('header-hidden');
              }

              lastScrollY = currentScrollY;
              isScrolling = false;
            });
          };

          window.addEventListener('scroll', handleScroll, { passive: true });
        }

        // Gestion de l'overflow pour basculer desktop/mobile
        const checkOverflow = () => {
          if (!menuDesktop || !burger) return;

          const isOverflowing = menuDesktop.scrollWidth > menuDesktop.clientWidth;

          if (isOverflowing) {
            menuDesktop.classList.add("force-hide");
            burger.classList.add("force-show");
          } else {
            menuDesktop.classList.remove("force-hide");
            burger.classList.remove("force-show");
          }
        };

        window.addEventListener("load", checkOverflow);
        window.addEventListener("resize", checkOverflow);
      }
  </script>
</header>
  
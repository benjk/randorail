---
import content from '../data/content.json';
import { VIDEO_HERO_URL } from '../config';
import HighlightOnHash from './Highlight';
import { imageWithHash } from '../admin/components/images/imageWithHash';
import { blocRules } from '../admin/data/blocRules';
import ActivityCard from '../components/ActivityCard.astro'
import { activitiesWithMeta } from '../data/activities';
---

<div id="home-container" class="content-container">
  {
    content.home.announcement?.enabled &&
      (() => {
        const { sourceBlocKey, blocIndex } = content.home.announcement;
        const blocRule = blocRules[sourceBlocKey];
        if (!blocRule) return null;

        const jsonPath = blocRule.jsonKey.split('.');
        let blocData: any = content;
        for (const part of jsonPath) {
          if (!blocData) break;
          blocData = blocData[part];
        }

        const item = blocData?.items?.[blocIndex];
        if (!item) return null;

        const firstImageField = Object.values(
          blocRules[sourceBlocKey].imageFields || {},
        )[0];
        const folder = firstImageField?.folder || '';

        return (
          <section id="announcement" class="announcement-section">
            <div
              class="announcement-wrapper"
              style={`background-image: url('${imageWithHash(item.imgName, folder)}')`}
            >
              <div class="announcement-content">
                <h3 class="announcement-title">{item.title}</h3>
                <p class="announcement-text">{item.content}</p>
              </div>
            </div>
          </section>
        );
      })()
  }

  <section class="first-section">
    <div class="cards-grid">
      {
        activitiesWithMeta.map((activity) => (
          <ActivityCard
            bgImage={activity.bgImage}
            icon={activity.icon}
            title={activity.title}
            slug={activity.slug}
          />
        ))
      }
    </div>
  </section>

  <section class="second-section">
    <video autoplay muted loop playsinline class="video-bg">
      <source src=`${VIDEO_HERO_URL}` type="video/webm" />
    </video>
    <div class="video-overlay">
      <h3 id="intro-text1" class="p2 p3">{content.home.secondSection.text1}</h3>
    </div>
  </section>
  <section class="third-section"></section>
</div>
<script>
  function initParallax() {
    const firstSection = document.querySelector(
      '.first-section',
    ) as HTMLElement;

    if (!firstSection) return;

    let currentOffset = 0;
    let targetOffset = 0;

    function updateVideoPosition() {
      const scrollY = window.scrollY;
      const firstSectionHeight = firstSection.offsetHeight;

      const progress = Math.min(Math.max(scrollY / firstSectionHeight, 0), 1);

      // Vidéo descend de 0 à 20vh (sort progressivement)
      targetOffset = progress * 20;
    }

    function animate() {
      currentOffset += (targetOffset - currentOffset) * 0.1;

      document.documentElement.style.setProperty(
        '--video-offset',
        `${currentOffset}vh`,
      );
      requestAnimationFrame(animate);
    }

    animate();
    window.addEventListener('scroll', updateVideoPosition, { passive: true });
    updateVideoPosition();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initParallax);
  } else {
    initParallax();
  }
</script>
<script>
  window.addEventListener('scroll', () => {
    const firstSection = document.querySelector(
      '.first-section',
    ) as HTMLElement;

    if (!firstSection) return;
    const video = document.querySelector('.video-bg') as HTMLElement;

    if (!firstSection || !video) return;

    const scrollY = window.scrollY;
    const firstSectionHeight = firstSection.offsetHeight;

    // limite à 20vh max pour la vidéo
    const offset = Math.min(scrollY / firstSectionHeight, 1) * 20;

    video.style.transform = `translateY(${offset}vh)`;
  });
</script>

<HighlightOnHash client:load />
